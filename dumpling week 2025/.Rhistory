dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
}
# loop through dumplings, build dumpling data table
dumpling_week <- tibble()
for (i in seq(1,length(restaurants),1)) {
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3) {
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) { # two addresses in the address field
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],2),
description = rep(description[[1]][3],2))
} else { # normal!
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
}
restaurants
i = 20
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
description
# list of dumpling descriptions
# layout:
#   first line = address
#   second line = dine in, takeout, online orders
#   third line = dumpling name/description
descriptions <- html_nodes(webpage, '.list-item-content__description') |> html_text2() |> str_replace_all("\\n+", "\n") |> str_trim()
descriptions
# loop through dumplings, build dumpling data table
dumpling_week <- tibble()
for (i in seq(1,length(restaurants),1)) {
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3) {
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) { # two addresses in the address field
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],2),
description = rep(description[[1]][3],2))
} else { # normal!
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
}
description
str_match(description[[1]][1], " and ")
str_match_all(description[[1]][1], " and ")
str_match_all(description[[1]][1], " and ") |> length()
str_match_all(description[[1]][1], " and ")[[1]] |> length()
i
str_split(description[[1]][1], " and ")[[1]]
# two+ addresses in the address field
r <- length(str_split(description[[1]][1], " and ")[[1]])
# loop through dumplings, build dumpling data table
dumpling_week <- tibble()
for (i in seq(1,length(restaurants),1)) {
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3) {
# two+ addresses in the address field
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) {
r <- length(str_split(description[[1]][1], " and ")[[1]])
temp_tib <- tibble(restaurant = rep(restaurant,r),
img = rep(img,r),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],r),
description = rep(description[[1]][3],r))
# normal!
} else {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
}
restaurants
i = 50
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
restaurant
restaurant == "Top Burmese"
description
# loop through dumplings, build dumpling data table
dumpling_week <- tibble()
for (i in seq(1,length(restaurants),1)) {
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3 & restaurant != "Top Burmese") {
# two+ addresses in the address field
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) {
r <- length(str_split(description[[1]][1], " and ")[[1]])
temp_tib <- tibble(restaurant = rep(restaurant,r),
img = rep(img,r),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],r),
description = rep(description[[1]][3],r))
# normal!
} else {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
}
i = 50
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
temp_tib
description[[1]]
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3 & restaurant != "Top Burmese") {
# two+ addresses in the address field
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) {
r <- length(str_split(description[[1]][1], " and ")[[1]])
temp_tib <- tibble(restaurant = rep(restaurant,r),
img = rep(img,r),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],r),
description = rep(description[[1]][3],r))
# normal!
} else {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
temp_tib
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
# loop through dumplings, build dumpling data table
dumpling_week <- tibble()
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3 & restaurant != "Top Burmese") {
# two+ addresses in the address field
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) {
r <- length(str_split(description[[1]][1], " and ")[[1]])
temp_tib <- tibble(restaurant = rep(restaurant,r),
img = rep(img,r),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],r),
description = rep(description[[1]][3],r))
# normal!
} else {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
temp_tib
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
dumpling_week
# loop through dumplings, build dumpling data table
dumpling_week <- tibble()
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3) {
# two+ addresses in the address field
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) {
r <- length(str_split(description[[1]][1], " and ")[[1]])
temp_tib <- tibble(restaurant = rep(restaurant,r),
img = rep(img,r),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],r),
description = rep(description[[1]][3],r))
# normal!
} else {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
}
temp_tib
i
i = 51
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
restaurant
img
description
# loop through dumplings, build dumpling data table
dumpling_week <- tibble()
for (i in seq(1,length(restaurants),1)) {
restaurant <- restaurants[i]
img <- img_links[i]
description <- descriptions[i] |> str_split(pattern = "\\n")
# special case: 4 locations for Top Burmese without easy split
if (restaurant == "Top Burmese") {
temp_tib <- tibble(restaurant = rep(restaurant,4),
img = rep(img,4),
address = c("413 NW 21st, Portland","1305 NW 23rd Ave. Portland","12655 SW 1st St. Beaverton","180 E Main St. Hillsboro"),
dining = rep(description[[1]][2],4),
description = rep(description[[1]][3],4))
# description length 3
} else if (length(description[[1]]) == 3) {
# two+ addresses in the address field
if (str_detect(description[[1]][1], " and ") & !str_detect(description[[1]][1], "Festival")) {
r <- length(str_split(description[[1]][1], " and ")[[1]])
temp_tib <- tibble(restaurant = rep(restaurant,r),
img = rep(img,r),
address = str_split(description[[1]][1], " and ")[[1]],
dining = rep(description[[1]][2],r),
description = rep(description[[1]][3],r))
# normal!
} else {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = description[[1]][3])}
# description length 4
} else if (length(description[[1]]) == 4) {
# if length = 4, but the second one is dining options -> the last two are both description.
if (str_starts(string = description[[1]][2], pattern = "Dine")) {
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste(description[[1]][3], description[[1]][4]))
# if length = 4, but the second one is NOT dining options -> there are two addresses.
} else {
temp_tib <- tibble(restaurant = rep(restaurant,2),
img = rep(img,2),
address = c(description[[1]][1],description[[1]][2]),
dining = rep(description[[1]][3],2),
description = rep(description[[1]][4],2))
}
# description length 5
} else if (length(description[[1]]) == 5) { # the last three are description
temp_tib <- tibble(restaurant = restaurant,
img = img,
address = description[[1]][1],
dining = description[[1]][2],
description = paste0(description[[1]][3],", ",
description[[1]][4],", ",
description[[1]][5]))
}
dumpling_week <- dumpling_week |> bind_rows(temp_tib)
}
dumpling_week$address
# add city to address
for (addy in dumpling_week$address) {
if (str_detect(addy, "Portland|Lake Oswego|Tigard|Beaverton|Hillsboro|Gresham") == FALSE) {
temp_tib <- dumpling_week |> filter(address == addy) |> select(-address) |>
mutate(address = paste0(addy, ", Portland, OR"))
} else {
temp_tib <- dumpling_week |> filter(address == addy)
}
dumpling_week <- dumpling_week |> filter(address != addy) |>
bind_rows(temp_tib) |>
arrange(restaurant)
rm(temp_tib)
}
dumpling_week |> summary()
# arrange columns
dumpling_week <- dumpling_week |> select(restaurant, img, description, address, dining)
# export
dumpling_week |> select(-img) |> save(file = "dumpling_week_2025.RData")
dumpling_week
# export
dumpling_week |> select(-img) |> save(file = "dumpling_week_2025.RData")
dumpling_week |> colnames()
dumpling_week
dumpling_week |> select(-img)
# export
dumpling_week |> select(-img) |> save(file = "dumpling_week_2025.RData")
dumpling_week |> select(-img) |> write_csv(file = "dumpling_week_2025.csv")
# export
dumpling_week |> select(-img) |> save(file = "dumpling_week_2025.RData")
select(dumpling_week, -img)
# export
select(dumpling_week, -img) |> save(file = "dumpling_week_2025.RData")
# export
save(select(dumpling_week, -img), file = "dumpling_week_2025.RData")
select(dumpling_week, -img)
# export
dumpling_week |> save(file = "dumpling_week_2025.RData")
# save to google sheets so we can vote:
# format image url for google sheets
formula <- '=IMAGE("'
end <- '")'
dumpling_week_g <- dumpling_week |> mutate(img = paste0(formula, img, end))
View(dumpling_week_g)
gs4_create("dumpling-week-2025", sheets = dumpling_week_g)
### for shiny app ###
# look up gps coordinates
dumpling_week <- dumpling_week |> geocode(address, method = 'arcgis', lat = latitude , long = longitude)
# convert coordinates to mercator
geometry <- as_tibble(sf_project(st_crs(4326), st_crs(3857), dumpling_week |> select(longitude, latitude)))
dumpling_week <- dumpling_week |> bind_cols(geometry) |>
rename(lon = V1, lat = V2)
# load pdx gis data
load("../pdx_gis.RData")
save(dumpling_week, pdx, river_boundaries, file = "for_shiny.RData")
View(dumpling_week)
