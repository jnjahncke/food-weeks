"The Fine Print!" = "fine_print",
"Meat or Vegetarian?" = "meat_veggie",
"Vegetarian Substitute?" = "veggie_sub",
"Vegan Substitute?" = "vegan_sub",
"Gluten Free?" = "gf",
"Gluten Free Substitute?" = "gf_sub",
"Whole Pie or Slice?" = "whole_slice",
"Allow Minors?" = "minors",
"Allow Takeout?" = "takeout",
"Allow Delivery?" = "delivery",
"Purchase Limit per Customer?" = "purchase_limit",
"Daily Availability Limit?" = "availability_limit")
# loop through pizza links, get info, build pizza data table
pizza_week <- tibble()
for (i in 1:length(rest_links)) {
url <- rest_links[i]
webpage <- read_html(url)
labels <- html_nodes(webpage, 'br+ strong , .mb-5 strong:nth-child(1)') %>% html_text2() %>% str_squish()
info <- html_nodes(webpage, '.description') %>% html_text2() %>% .[1]
# split at each label
label_list = "What It's Called:"
for (label in labels){
label <- str_replace(label,"[?]","\\\\?")
label_list <- paste0(label_list, "|", label)
}
info <- info %>% str_split_1(label_list) %>% .[-1]
info2 <- c()
for (element in info) {
element <- str_squish(element)
info2 <- append(info2, str_replace(element, "^ |^[?] ", ""))
}
# build tibble
temp_tib <- tibble(pizza = info2[1])
for (j in seq(2,length(info2))) {
name <- paste(label_dict[paste0(labels[j][[1]])])
val <- paste0(info2[j])
temp_tib <- temp_tib %>% mutate(!!name := val) %>% mutate(restaurant = restaurants[i])
}
if (dim(pizza_week)[1] == 0) {
pizza_week <- pizza_week %>% bind_rows(temp_tib)
} else {
pizza_week <- pizza_week %>% full_join(temp_tib)
}
rm(info, info2, url, webpage, labels, label_list, temp_tib, name, val, element, i, j)
}
pizza_week$address_hours
# remove restaurant name from start of address_hours
names <- c("Von Ebert Beaverton", "Von Ebert Cascade Station", "Von Ebert Pearl", "Von Ebert Glendoveer")
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
ah <- temp$address_hours %>% str_split(": ", n = 2)
if (ah[[1]][1] %in% names) {
temp$address_hours <- ah[[1]][2]
}
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
View(pizza_week2)
# remove restaurant name from start of address_hours
names <- restaurants %>% append(c("Von Ebert Beaverton", "Von Ebert Cascade Station", "Von Ebert Pearl", "Von Ebert Glendoveer"))
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
ah <- temp$address_hours %>% str_split(": ", n = 2)
if (ah[[1]][1] %in% names) {
temp$address_hours <- ah[[1]][2]
}
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
ah <- temp$address_hours %>% str_split(", |: ", n = 2)
if (ah[[1]][1] %in% names) {
temp$address_hours <- ah[[1]][2]
}
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
pizza_week <- pizza_week2 %>% select(-fine_print)
rm(pizza_week2, names, temp, ah, i)
i = 1
temp <- pizza_week[i,]
temp
ah <- temp$address_hours
ah
write_csv(pizza_week %>% select(pizza, restaurant, address_hours), file = "locations.csv")
# separate address_hours into address and hours
# duplicate entries if there are two addresses associated
locations <- read_csv("locations.csv")
View(locations)
temp <- pizza_week[i,]
# duplicate entries if there are two addresses associated
locations <- read_csv("locations.csv")
pizza_week <- full_join(pizza_week, locations)
temp <- pizza_week[i,]
ah <- temp$address_hours
loc_sep <- temp$loc_sep
ah <- temp$address_hours %>% str_split(loc_sep)
ah
ah[[1]]
length(ah[[1]])
ah[[1]][1]
ah[[1]][2]
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
if (temp$locations > 1) {
loc_sep <- temp$loc_sep
ah <- temp$address_hours %>% str_split(loc_sep)
temp1 <- temp %>% mutate(address_hours = ah[[1]][1])
temp2 <- temp %>% mutate(address_hours = ah[[1]][2])
pizza_week2 <- pizza_week2 %>% bind_rows(temp1, temp2)
} else {
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
}
View(pizza_week2)
temp1 <- temp %>% mutate(address_hours = ah[[1]][1])
temp2 <- temp %>% mutate(address_hours = ah[[1]][2])
temp1
temp2
ah
i = 1
temp <- pizza_week[i,]
loc_sep <- temp$loc_sep
ah <- temp$address_hours %>% str_split(loc_sep)
ah
temp %>% mutate(address_hours = ah[[1]][1])
temp %>% mutate(address_hours = ah[[1]][2])
View(pizza_week)
i = 9
temp <- pizza_week[i,]
temp
loc_sep <- temp$loc_sep
loc_sep
loc_sep %>% str_replace("\\", "")
loc_sep %>% str_replace("\\\", "")
loc_sep %>% str_replace("\", "")
# duplicate entries if there are two addresses associated
locations <- read_csv("locations.csv")
pizza_week %>% select(-locations, -loc_sep)
pizza_week <- pizza_week %>% select(-locations, -loc_sep)
pizza_week <- full_join(pizza_week, locations)
temp <- pizza_week[i,]
loc_sep <- temp$loc_sep
loc_sep
ah <- temp$address_hours %>% str_split(loc_sep)
ah
pizza_week <- pizza_week %>% select(-locations, -loc_sep)
# duplicate entries if there are two addresses associated
locations <- read_csv("locations.csv")
pizza_week <- full_join(pizza_week, locations)
pizza_week2 <- tibble()
temp <- pizza_week[i,]
loc_sep <- temp$loc_sep
ah <- temp$address_hours %>% str_split(loc_sep)
loc_sep
ah
loc_sep <- paste0(temp$loc_sep)
ah <- temp$address_hours %>% str_split(loc_sep)
ah
loc_sep
pizza_week <- pizza_week %>% select(-locations, -loc_sep)
# duplicate entries if there are two addresses associated
locations <- read_csv("locations.csv")
pizza_week <- full_join(pizza_week, locations)
temp <- pizza_week[i,]
loc_sep <- temp$loc_sep
temp <- pizza_week[i,]
loc_sep <- temp$loc_sep
loc_sep
loc_split <- str_split(loc_sep, ",")
loc_split
length(loc_split)
loc_split <- str_split(loc_sep, ",", simplify = T)
loc_split
length(loc_split)
loc_split[1]
loc_split[2]
ah <- temp$address_hours %>% str_split(c(loc_sep[1], loc_sep[2]))
ah
loc_split <- str_split(loc_sep, ",", simplify = T)
ah <- temp$address_hours %>% str_split(c(loc_sep[1], loc_sep[2]))
ah
temp
loc_sep
loc_sep <- temp$loc_sep
loc_split <- str_split(loc_sep, ",", simplify = T)
ah <- temp$address_hours %>% str_split(c(loc_split[1], loc_split[2]))
ah
ah <- temp$address_hours %>% str_split(loc_split[1]|loc_split[2])
ah <- temp$address_hours %>% str_split(paste(loc_split[1])|paste(loc_split[2]))
ah
loc_split
loc_split[1]
ah <- temp$address_hours %>% str_split(paste0(loc_split[1])|paste0(loc_split[2]))
ah
ah <- temp$address_hours %>% str_split(loc_split[1])
ah
ah <- temp$address_hours %>% str_split(loc_split[1], simplify = T)
ah
ah <- temp$address_hours %>% str_split(loc_split[1], simplify = T) %>% .[2]
ah
ah <- temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>%
str_split(loc_split[2], simplify = T) %>% .[2]
ah
temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2]
temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>% str_split(loc_split[2])
loc_split[2]
loc_split <- str_split(loc_sep, ", ", simplify = T)
ah <- temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>%
str_split(loc_split[2], simplify = T) %>% .[2]
ah
ah <- temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>%
str_split(loc_split[2], simplify = T)
ah
temp1 <- temp %>% mutate(address_hours = ah[[1]][1])
temp2 <- temp %>% mutate(address_hours = ah[[1]][2])
temp1
temp2
ah
temp1 <- temp %>% mutate(address_hours = ah[1])
temp2 <- temp %>% mutate(address_hours = ah[2])
temp1
temp2
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
temp1
temp2
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
if (temp$locations > 1) {
loc_sep <- temp$loc_sep
loc_split <- str_split(loc_sep, ", ", simplify = T)
if (length(loc_split) > 1) {
ah <- temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>%
str_split(loc_split[2], simplify = T)
} else {ah <- temp$address_hours %>% str_split(loc_sep)}
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
pizza_week2 <- pizza_week2 %>% bind_rows(temp1, temp2)
} else {
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
}
View(pizza_week2)
library(tidyverse)
library(rvest)
library(tidygeocoder)
library(sf)
library(googlesheets4)
url <- 'https://everout.com/portland/events/the-portland-mercurys-pizza-week-2024/e170026/'
webpage <- read_html(url)
# get restaurant and wing names
restaurants <- html_nodes(webpage, 'h4 a') %>% html_text2()
pizzas <- html_nodes(webpage, 'h3 a') %>% html_text2()
# list of links to wing descriptions
rest_links <- html_nodes(webpage, 'h3 a') %>% html_attr('href')
# label dictionary - will be used to name columns
label_dict <- c("What It's Called:" = "pizza",
"What's On It:" = "toppings",
"What They Say About It:" = "description",
"Where and When to Get It:" = "address_hours",
"The Fine Print!" = "fine_print",
"Meat or Vegetarian?" = "meat_veggie",
"Vegetarian Substitute?" = "veggie_sub",
"Vegan Substitute?" = "vegan_sub",
"Gluten Free?" = "gf",
"Gluten Free Substitute?" = "gf_sub",
"Whole Pie or Slice?" = "whole_slice",
"Allow Minors?" = "minors",
"Allow Takeout?" = "takeout",
"Allow Delivery?" = "delivery",
"Purchase Limit per Customer?" = "purchase_limit",
"Daily Availability Limit?" = "availability_limit")
# loop through pizza links, get info, build pizza data table
pizza_week <- tibble()
for (i in 1:length(rest_links)) {
url <- rest_links[i]
webpage <- read_html(url)
labels <- html_nodes(webpage, 'br+ strong , .mb-5 strong:nth-child(1)') %>% html_text2() %>% str_squish()
info <- html_nodes(webpage, '.description') %>% html_text2() %>% .[1]
# split at each label
label_list = "What It's Called:"
for (label in labels){
label <- str_replace(label,"[?]","\\\\?")
label_list <- paste0(label_list, "|", label)
}
info <- info %>% str_split_1(label_list) %>% .[-1]
info2 <- c()
for (element in info) {
element <- str_squish(element)
info2 <- append(info2, str_replace(element, "^ |^[?] ", ""))
}
# build tibble
temp_tib <- tibble(pizza = info2[1])
for (j in seq(2,length(info2))) {
name <- paste(label_dict[paste0(labels[j][[1]])])
val <- paste0(info2[j])
temp_tib <- temp_tib %>% mutate(!!name := val) %>% mutate(restaurant = restaurants[i])
}
if (dim(pizza_week)[1] == 0) {
pizza_week <- pizza_week %>% bind_rows(temp_tib)
} else {
pizza_week <- pizza_week %>% full_join(temp_tib)
}
rm(info, info2, url, webpage, labels, label_list, temp_tib, name, val, element, i, j)
}
##### cleaning #####
# remove restaurant name from start of address_hours
names <- restaurants %>% append(c("Von Ebert Beaverton", "Von Ebert Cascade Station", "Von Ebert Pearl", "Von Ebert Glendoveer"))
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
ah <- temp$address_hours %>% str_split(", |: ", n = 2)
if (ah[[1]][1] %in% names) {
temp$address_hours <- ah[[1]][2]
}
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
pizza_week <- pizza_week2 %>% select(-fine_print)
rm(pizza_week2, names, temp, ah, i)
View(pizza_week)
# duplicate entries if there are two addresses associated
locations <- read_csv("locations.csv")
pizza_week <- full_join(pizza_week, locations)
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
if (temp$locations > 1) {
loc_sep <- temp$loc_sep
loc_split <- str_split(loc_sep, ", ", simplify = T)
if (length(loc_split) > 1) {
ah <- temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>%
str_split(loc_split[2], simplify = T)
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
pizza_week2 <- pizza_week2 %>% bind_rows(temp1, temp2)
} else {
ah <- temp$address_hours %>% str_split(loc_sep, simplify = T)
temp <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}}
else {
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
}
View(pizza_week2)
i = 1
temp <- pizza_week[i,]
ah <- temp$address_hours %>% str_split(loc_sep, simplify = T)
ah
loc_sep <- temp$loc_sep
ah <- temp$address_hours %>% str_split(loc_sep, simplify = T)
loc_sep
ah
ah <- temp$address_hours %>% str_split(loc_sep, simplify = T)
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
temp1
temp2
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
if (temp$locations > 1) {
loc_sep <- temp$loc_sep
loc_split <- str_split(loc_sep, ", ", simplify = T)
if (length(loc_split) > 1) {
ah <- temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>%
str_split(loc_split[2], simplify = T)
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
pizza_week2 <- pizza_week2 %>% bind_rows(temp1, temp2)
} else {
ah <- temp$address_hours %>% str_split(loc_sep, simplify = T)
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
pizza_week2 <- pizza_week2 %>% bind_rows(temp1, temp2)
}}
else {
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
}
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/]|,|.", remove = TRUE, extra = "merge")
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/,.]", remove = TRUE, extra = "merge")
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/,.]", remove = TRUE, extra = "merge") %>% Vie
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/,.]", remove = TRUE, extra = "merge") %>% View
url <- 'https://everout.com/portland/events/the-portland-mercurys-pizza-week-2024/e170026/'
webpage <- read_html(url)
# get restaurant and wing names
restaurants <- html_nodes(webpage, 'h4 a') %>% html_text2()
pizzas <- html_nodes(webpage, 'h3 a') %>% html_text2()
# list of links to wing descriptions
rest_links <- html_nodes(webpage, 'h3 a') %>% html_attr('href')
# label dictionary - will be used to name columns
label_dict <- c("What It's Called:" = "pizza",
"What's On It:" = "toppings",
"What They Say About It:" = "description",
"Where and When to Get It:" = "address_hours",
"The Fine Print!" = "fine_print",
"Meat or Vegetarian?" = "meat_veggie",
"Vegetarian Substitute?" = "veggie_sub",
"Vegan Substitute?" = "vegan_sub",
"Gluten Free?" = "gf",
"Gluten Free Substitute?" = "gf_sub",
"Whole Pie or Slice?" = "whole_slice",
"Allow Minors?" = "minors",
"Allow Takeout?" = "takeout",
"Allow Delivery?" = "delivery",
"Purchase Limit per Customer?" = "purchase_limit",
"Daily Availability Limit?" = "availability_limit")
# loop through pizza links, get info, build pizza data table
pizza_week <- tibble()
for (i in 1:length(rest_links)) {
url <- rest_links[i]
webpage <- read_html(url)
labels <- html_nodes(webpage, 'br+ strong , .mb-5 strong:nth-child(1)') %>% html_text2() %>% str_squish()
info <- html_nodes(webpage, '.description') %>% html_text2() %>% .[1]
# split at each label
label_list = "What It's Called:"
for (label in labels){
label <- str_replace(label,"[?]","\\\\?")
label_list <- paste0(label_list, "|", label)
}
info <- info %>% str_split_1(label_list) %>% .[-1]
info2 <- c()
for (element in info) {
element <- str_squish(element)
info2 <- append(info2, str_replace(element, "^ |^[?] ", ""))
}
# build tibble
temp_tib <- tibble(pizza = info2[1])
for (j in seq(2,length(info2))) {
name <- paste(label_dict[paste0(labels[j][[1]])])
val <- paste0(info2[j])
temp_tib <- temp_tib %>% mutate(!!name := val) %>% mutate(restaurant = restaurants[i])
}
if (dim(pizza_week)[1] == 0) {
pizza_week <- pizza_week %>% bind_rows(temp_tib)
} else {
pizza_week <- pizza_week %>% full_join(temp_tib)
}
rm(info, info2, url, webpage, labels, label_list, temp_tib, name, val, element, i, j)
}
##### cleaning #####
# remove restaurant name from start of address_hours
names <- restaurants %>% append(c("Von Ebert Beaverton", "Von Ebert Cascade Station", "Von Ebert Pearl", "Von Ebert Glendoveer"))
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
ah <- temp$address_hours %>% str_split(", |: ", n = 2)
if (ah[[1]][1] %in% names) {
temp$address_hours <- ah[[1]][2]
}
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
pizza_week <- pizza_week2 %>% select(-fine_print)
rm(pizza_week2, names, temp, ah, i)
# duplicate entries if there are two addresses associated
locations <- read_csv("locations.csv")
pizza_week <- full_join(pizza_week, locations)
pizza_week2 <- tibble()
for (i in seq(1,nrow(pizza_week))) {
temp <- pizza_week[i,]
if (temp$locations > 1) {
loc_sep <- temp$loc_sep
loc_split <- str_split(loc_sep, ", ", simplify = T)
if (length(loc_split) > 1) {
ah <- temp$address_hours %>%
str_split(loc_split[1], simplify = T) %>% .[2] %>%
str_split(loc_split[2], simplify = T)
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
pizza_week2 <- pizza_week2 %>% bind_rows(temp1, temp2)
} else {
ah <- temp$address_hours %>% str_split(loc_sep, simplify = T)
temp1 <- temp %>% mutate(address_hours = ah[1] %>% str_squish())
temp2 <- temp %>% mutate(address_hours = ah[2] %>% str_squish())
pizza_week2 <- pizza_week2 %>% bind_rows(temp1, temp2)
}}
else {
pizza_week2 <- pizza_week2 %>% bind_rows(temp)
}
}
View(pizza_week2)
pizza_week <- pizza_week2
rm(temp, temp1, temp2, pizza_week2, loc_split, loc_sep, ah, i)
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/,.]", remove = TRUE, extra = "merge") %>% View
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/,.-]", remove = TRUE, extra = "merge") %>% View
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/,-]", remove = TRUE, extra = "merge") %>% View
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = "[/,-]|./", remove = TRUE, extra = "merge") %>% View
# separate address_hours into address and hours
pizza_week %>% separate(address_hours, into = c("address","hours"), sep = ",./|[/,-]", remove = TRUE, extra = "merge") %>% View
# save to google sheets so we can vote:
gs4_create("pizza-week-2024", sheets = pizza_week)
